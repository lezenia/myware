import React, { useState, useEffect } from 'react';

// Main App component which handles authentication and overall routing
function App() {
  // State to manage user authentication status
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  // State to store login error messages
  const [loginError, setLoginError] = useState('');

  // Function to handle user login attempt
  const handleLogin = (id, password) => {
    // Hardcoded credentials for demonstration
    if (id === 'admin' && password === '1234') {
      setIsAuthenticated(true);
      setLoginError(''); // Clear any previous errors
    } else {
      setLoginError('잘못된 아이디 또는 비밀번호입니다. 다시 시도해주세요.'); // 한국어: 잘못된 아이디 또는 비밀번호입니다. 다시 시도해주세요.
    }
  };

  // If not authenticated, show the Login component
  if (!isAuthenticated) {
    return <Login onLogin={handleLogin} error={loginError} />;
  }

  // If authenticated, show the main Dashboard component
  return <Dashboard onLogout={() => setIsAuthenticated(false)} />;
}

// Login component for user authentication
function Login({ onLogin, error }) {
  const [id, setId] = useState('');
  const [password, setPassword] = useState('');

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    onLogin(id, password);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center p-4">
      <div className="bg-white rounded-xl shadow-2xl p-8 max-w-md w-full">
        <h2 className="text-3xl font-extrabold text-center text-gray-800 mb-8">
          환영합니다! 로그인
        </h2>
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md mb-6 text-sm" role="alert">
            {error}
          </div>
        )}
        <form onSubmit={handleSubmit}>
          <div className="mb-5">
            <label htmlFor="id" className="block text-gray-700 text-sm font-semibold mb-2">
              아이디:
            </label>
            <input
              type="text"
              id="id"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-400 transition duration-200"
              value={id}
              onChange={(e) => setId(e.target.value)}
              required
            />
          </div>
          <div className="mb-6">
            <label htmlFor="password" className="block text-gray-700 text-sm font-semibold mb-2">
              비밀번호:
            </label>
            <input
              type="password"
              id="password"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-400 transition duration-200"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          <button
            type="submit"
            className="w-full bg-indigo-600 text-white py-3 rounded-lg font-bold text-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 transition duration-300 shadow-lg"
          >
            로그인
          </button>
        </form>
        <p className="text-center text-gray-500 text-sm mt-6">
          <span className="font-semibold">자격 증명:</span> 아이디: admin, 비밀번호: 1234
        </p>
      </div>
    </div>
  );
}

// Dashboard component for the main application interface
function Dashboard({ onLogout }) {
  // State to manage the currently active page/section
  const [currentPage, setCurrentPage] = useState('home');
  // State to store all events (lifted from ScheduleContent)
  const [events, setEvents] = useState([]);
  // State to store external projects (lifted from DesignContent concept)
  const [externalProjects, setExternalProjects] = useState([
    // Initial placeholder projects for demonstration
    { name: 'Client A - 마케팅 웹사이트 재설계', status: '진행 중', timestamp: Date.now() - 86400000 * 2 },
    { name: '스타트업 B - 로고 및 브랜딩 패키지', status: '완료', timestamp: Date.now() - 86400000 * 5 },
    { name: '프리랜서 프로젝트 C - 일러스트 시리즈', status: '대기 중', timestamp: Date.now() - 86400000 * 1 },
  ]);

  // States for AI-powered content modal
  const [showModal, setShowModal] = useState(false);
  const [modalTitle, setModalTitle] = useState('');
  const [modalContent, setModalContent] = useState('');
  const [isLoadingAI, setIsLoadingAI] = useState(false); // New loading state for AI calls

  // State for Toast Notifications
  const [toast, setToast] = useState({ show: false, message: '', type: '' });

  // Function to show toast notification
  const showToast = (message, type = 'info') => {
    setToast({ show: true, message, type });
    setTimeout(() => {
      setToast({ show: false, message: '', type: '' });
    }, 3000); // Hide after 3 seconds
  };

  // State for Dark Mode
  const [isDarkMode, setIsDarkMode] = useState(false);

  // Effect to apply dark mode class to body/html
  useEffect(() => {
    if (isDarkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [isDarkMode]);

  // Function to render the content based on the current page
  const renderPageContent = () => {
    switch (currentPage) {
      case 'home':
        return <HomeContent events={events} externalProjects={externalProjects} onNavigate={setCurrentPage} />;
      case 'schedule':
        return <ScheduleContent events={events} setEvents={setEvents} showToast={showToast} setShowModal={setShowModal} setModalTitle={setModalTitle} setModalContent={setModalContent} setIsLoadingAI={setIsLoadingAI} isLoadingAI={isLoadingAI} />;
      case 'design':
        return <DesignContent externalProjects={externalProjects} setExternalProjects={setExternalProjects} showToast={showToast} setShowModal={setShowModal} setModalTitle={setModalTitle} setModalContent={setModalContent} setIsLoadingAI={setIsLoadingAI} isLoadingAI={isLoadingAI} />;
      default:
        return <HomeContent events={events} externalProjects={externalProjects} onNavigate={setCurrentPage} />;
    }
  };

  return (
    <div className={`flex flex-col min-h-screen font-sans ${isDarkMode ? 'bg-gray-900 text-gray-100' : 'bg-gray-50 text-gray-900'}`}>
      {/* Navigation Bar: Uses flexbox for horizontal layout on medium screens and larger,
          and stacks vertically on smaller screens (default flex-col).
          `flex-wrap` ensures items wrap to the next line if space is limited. */}
      <nav className={`${isDarkMode ? 'bg-gray-800 shadow-lg' : 'bg-white shadow-md'} p-4 sticky top-0 z-10`}>
        <div className="container mx-auto flex flex-col md:flex-row items-center justify-between">
          <div className="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-4 md:mb-0">[이주환의 개인 사이트]</div>
          <ul className="flex flex-wrap justify-center gap-4 md:gap-6 text-lg">
            <li>
              <button
                onClick={() => setCurrentPage('home')}
                className={`px-4 py-2 rounded-md font-medium transition duration-200 ${
                  currentPage === 'home' ? 'bg-indigo-500 text-white shadow-md' : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                }`}
              >
                Home
              </button>
            </li>
            <li>
              <button
                onClick={() => setCurrentPage('schedule')}
                className={`px-4 py-2 rounded-md font-medium transition duration-200 ${
                  currentPage === 'schedule' ? 'bg-indigo-500 text-white shadow-md' : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                }`}
              >
                Schedule
              </button>
            </li>
            <li>
              <button
                onClick={() => setCurrentPage('design')}
                className={`px-4 py-2 rounded-md font-medium transition duration-200 ${
                  currentPage === 'design' ? 'bg-indigo-500 text-white shadow-md' : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                }`}
              >
                Design
              </button>
            </li>
            <li>
              <a
                href="https://gemini.google.com/"
                target="_blank"
                rel="noopener noreferrer"
                className="px-4 py-2 rounded-md font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition duration-200 flex items-center"
              >
                Gemini
                {/* External link icon for visual cue */}
                <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path></svg>
              </a>
            </li>
            <li>
              <a
                href="https://drive.google.com/"
                target="_blank"
                rel="noopener noreferrer"
                className="px-4 py-2 rounded-md font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition duration-200 flex items-center"
              >
                Google Drive
                {/* External link icon for visual cue */}
                <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path></svg>
              </a>
            </li>
            <li>
              <button
                onClick={() => setIsDarkMode(!isDarkMode)}
                className="px-4 py-2 rounded-md font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition duration-200 flex items-center"
              >
                {isDarkMode ? (
                  <svg className="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>
                ) : (
                  <svg className="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 4a1 1 0 01.707.293l1 1a1 1 0 01-1.414 1.414l-1-1A1 1 0 0114 6zM10 18a1 1 0 01-1 1v1a1 1 0 112 0v-1a1 1 0 01-1-1zM6 6a1 1 0 01-1.414 0l-1-1a1 1 0 111.414-1.414l1 1A1 1 0 016 6zm10 0a1 1 0 01-.707.293L15 6a1 1 0 111.414 1.414l-1 1a1 1 0 01-.707.293zM3 10a1 1 0 011-1h1a1 1 0 110 2H4a1 1 0 01-1-1zM17 10a1 1 0 011-1h1a1 1 0 110 2h-1a1 1 0 01-1-1zM5.636 14.364a1 1 0 010-1.414l1-1a1 1 0 011.414 1.414l-1 1a1 1 0 01-1.414 0zm12.728 0a1 1 0 01-1.414 0l-1-1a1 1 0 011.414-1.414l1 1a1 1 0 010 1.414zM10 14a4 4 0 100-8 4 4 0 000 8z" clipRule="evenodd"></path></svg>
                )}
                {isDarkMode ? '라이트 모드' : '다크 모드'}
              </button>
            </li>
            <li>
              <button
                onClick={onLogout}
                className="px-4 py-2 rounded-md font-medium bg-red-500 text-white hover:bg-red-600 transition duration-200 shadow-md"
              >
                Logout
              </button>
            </li>
          </ul>
        </div>
      </nav>

      {/* Main Content Area: Padding adjusts based on screen size (`p-6` for small, `p-8` for medium and up) */}
      <main className="flex-1 p-6 md:p-8">
        <div className="container mx-auto">
          {renderPageContent()}
        </div>
      </main>

      {/* Footer */}
      <footer className={`${isDarkMode ? 'bg-gray-800' : 'bg-gray-800'} text-white p-4 text-center text-sm`}>
        &copy; {new Date().getFullYear()} 이주환의 개인 사이트. 모든 권리 보유.
      </footer>

      {/* Toast Notification */}
      {toast.show && (
        <div className={`fixed bottom-4 left-1/2 -translate-x-1/2 px-6 py-3 rounded-lg shadow-lg text-white text-center transition-opacity duration-300 ${
          toast.type === 'success' ? 'bg-green-500' : toast.type === 'error' ? 'bg-red-500' : 'bg-gray-700'
        } opacity-100`}>
          {toast.message}
        </div>
      )}

      {/* Global Modal for AI-generated content */}
      <Modal show={showModal} onClose={() => setShowModal(false)} title={modalTitle}>
        {isLoadingAI ? (
          <div className="flex justify-center items-center h-32">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 dark:border-gray-100"></div>
            <p className="ml-4 text-gray-700 dark:text-gray-300">생성 중... 잠시 기다려주세요.</p>
          </div>
        ) : modalContent}
      </Modal>

      {/* Custom styles for scrollbar in modal */}
      <style>{`
        .custom-scrollbar::-webkit-scrollbar {
          width: 8px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
          background: #f1f1f1;
          border-radius: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
          background: #888;
          border-radius: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
          background: #555;
        }
      `}</style>
    </div>
  );
}

// Reusable Modal Component
const Modal = ({ show, onClose, title, children }) => {
  if (!show) return null;

  // Function to copy content to clipboard
  const copyToClipboard = () => {
    // Determine if children is a string or JSX
    let textToCopy = '';
    if (typeof children === 'string') {
      textToCopy = children;
    } else if (React.isValidElement(children)) {
      // For JSX, iterate through children to extract text
      // This is a simple approach and might need refinement for complex nested JSX
      textToCopy = extractTextFromJSX(children);
    }

    if (textToCopy) {
      const el = document.createElement('textarea');
      el.value = textToCopy;
      document.body.appendChild(el);
      el.select();
      try {
        document.execCommand('copy');
        // Using a simple alert for demonstration; in a real app, use a custom message box
        // alert('내용이 클립보드에 복사되었습니다!');
      } catch (err) {
        console.error('텍스트를 복사할 수 없습니다: ', err);
        // alert('내용 복사에 실패했습니다.');
      } finally {
        document.body.removeChild(el);
      }
    }
  };

  // Helper to extract text from simple JSX structure
  const extractTextFromJSX = (node) => {
    if (typeof node === 'string') {
      return node;
    }
    if (Array.isArray(node)) {
      return node.map(extractTextFromJSX).join('\n');
    }
    if (React.isValidElement(node) && node.props.children) {
      return extractTextFromJSX(node.props.children);
    }
    return '';
  };


  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-md p-6 relative">
        <h3 className="text-xl font-bold text-gray-800 dark:text-gray-100 mb-4 pr-10">{title}</h3>
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-500 dark:text-gray-300 hover:text-gray-700 dark:hover:text-gray-100 text-2xl font-bold"
          aria-label="Close"
        >
          &times;
        </button>
        <div className="modal-body max-h-96 overflow-y-auto custom-scrollbar text-gray-700 dark:text-gray-200 mb-4">
          {children}
        </div>
        <div className="mt-4 flex justify-end">
          <button
            onClick={copyToClipboard}
            className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 mr-2"
          >
            클립보드에 복사
          </button>
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 dark:bg-gray-600 dark:text-gray-100 dark:hover:bg-gray-500"
          >
            닫기
          </button>
        </div>
      </div>
    </div>
  );
};


// 홈 페이지 콘텐츠
function HomeContent({ events, externalProjects, onNavigate }) {
  // 이벤트를 타임스탬프 기준으로 내림차순 정렬 (최신순)
  const sortedEvents = [...events].sort((a, b) => b.timestamp - a.timestamp);
  // 가장 최근 이벤트 3개 가져오기
  const recentEvents = sortedEvents.slice(0, 3);

  // 외부 프로젝트를 타임스탬프 기준으로 내림차순 정렬 (최신순)
  const sortedProjects = [...externalProjects].sort((a, b) => b.timestamp - a.timestamp);
  // 가장 최근 외부 프로젝트 3개 가져오기
  const recentExternalProjects = sortedProjects.slice(0, 3);

  return (
    <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 md:p-8">
      <h2 className="text-3xl font-bold text-gray-800 dark:text-gray-100 mb-6">홈 개요</h2>
      <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-4">
        이주환의 개인 웹사이트에 오신 것을 환영합니다! 이 대시보드는 다양한 섹션에 빠르게 접근할 수 있도록 도와줍니다.
      </p>

      {/* 개요 섹션: 작은 화면에서는 그리드 레이아웃이 쌓이고 (1열),
          중간 화면 이상에서는 2열이 됩니다 (`md:grid-cols-2`). */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
        {/* 최근 일정 이벤트 */}
        <div className="bg-indigo-50 dark:bg-indigo-900 p-6 rounded-lg shadow-sm border border-indigo-200 dark:border-indigo-700">
          <h3 className="text-xl font-bold text-indigo-800 dark:text-indigo-200 mb-4 flex items-center">
            <svg className="w-6 h-6 mr-2 text-indigo-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd"></path></svg>
            최근 일정 이벤트
          </h3>
          {recentEvents.length > 0 ? (
            <ul className="space-y-3">
              {recentEvents.map((event, index) => (
                <li
                  key={index}
                  onClick={() => onNavigate('schedule')}
                  className="bg-white dark:bg-gray-700 p-3 rounded-md shadow-xs cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-600 transition duration-200 border border-gray-100 dark:border-gray-600"
                >
                  <p className="font-semibold text-gray-800 dark:text-gray-100">{event.name}</p>
                  <p className="text-sm text-gray-600 dark:text-gray-300">날짜: {event.date} | 카테고리: {event.category}</p>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-gray-600 dark:text-gray-400 italic">아직 최근 일정이 없습니다. <button onClick={() => onNavigate('schedule')} className="text-blue-600 dark:text-blue-400 hover:underline font-semibold">일정</button>에 추가하세요!</p>
          )}
        </div>

        {/* Recent External Projects */}
        <div className="bg-purple-50 dark:bg-purple-900 p-6 rounded-lg shadow-sm border border-purple-200 dark:border-purple-700">
          <h3 className="text-xl font-bold text-purple-800 dark:text-purple-200 mb-4 flex items-center">
            <svg className="w-6 h-6 mr-2 text-purple-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11 3a1 1 0 100 2h2a1 1 0 100-2h-2z"></path><path fillRule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-4 4 4 4-4V5h-2.586l-4.707 4.707a1 1 0 01-1.414 0L6 7.414l-2 2V15z" clipRule="evenodd"></path></svg>
            최근 외부 프로젝트
          </h3>
          {recentExternalProjects.length > 0 ? (
            <ul className="space-y-3">
              {recentExternalProjects.map((project, index) => (
                <li
                  key={index}
                  onClick={() => onNavigate('design')}
                  className="bg-white dark:bg-gray-700 p-3 rounded-md shadow-xs cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-600 transition duration-200 border border-gray-100 dark:border-gray-600"
                >
                  <p className="font-semibold text-gray-800 dark:text-gray-100">{project.name}</p>
                  <p className="text-sm text-gray-600 dark:text-gray-300">상태: {project.status}</p>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-gray-600 dark:text-gray-400 italic">아직 최근 외부 프로젝트가 없습니다. <button onClick={() => onNavigate('design')} className="text-blue-600 dark:text-blue-400 hover:underline font-semibold">디자인</button>으로 이동하여 추가하세요!</p>
          )}
        </div>
      </div>
    </div>
  );
}

// Schedule Page Content
function ScheduleContent({ events, setEvents, showToast, setShowModal, setModalTitle, setModalContent, setIsLoadingAI, isLoadingAI }) {
  // States for new event input fields
  const [eventName, setEventName] = useState('');
  const [eventDate, setEventDate] = useState('');
  const [eventCategory, setEventCategory] = useState('Work'); // Default category
  const [searchTerm, setSearchTerm] = useState(''); // State for search term

  // Function to add a new event
  const addEvent = (e) => {
    e.preventDefault();
    if (!eventName || !eventDate) {
      console.log('이벤트 이름과 날짜를 모두 입력해주세요.');
      showToast('이벤트 이름과 날짜를 모두 입력해주세요.', 'error');
      return;
    }

    const newEvent = {
      name: eventName,
      date: eventDate,
      category: eventCategory,
      timestamp: new Date(eventDate).getTime() // Store timestamp for easier sorting/grouping
    };
    setEvents([...events, newEvent]);
    showToast('새 이벤트가 추가되었습니다!', 'success');
    // Clear form fields
    setEventName('');
    setEventDate('');
    setEventCategory('Work');
  };

  // Helper function to get month name from date string
  const getMonthName = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('default', { month: 'long' });
  };

  // Calculate events per month for charting
  const eventsPerMonth = events.reduce((acc, event) => {
    const month = getMonthName(event.date);
    acc[month] = (acc[month] || 0) + 1;
    return acc;
  }, {});

  // Convert events per month object to an array for easier rendering
  const monthData = Object.entries(eventsPerMonth).map(([month, count]) => ({ month, count }));

  // Calculate events by category for charting
  const eventsByCategory = events.reduce((acc, event) => {
    acc[event.category] = (acc[event.category] || 0) + 1;
    return acc;
  }, {});

  // Function to generate Google Calendar URL
  const generateGoogleCalendarUrl = (eventName, eventDate) => {
    const startDate = new Date(eventDate);
    const endDate = new Date(eventDate);
    endDate.setHours(startDate.getHours() + 1); // Default 1 hour duration

    const formatDateTime = (date) => {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      const hours = String(date.getHours()).padStart(2, '0');
      const minutes = String(date.getMinutes()).padStart(2, '0');
      const seconds = String(date.getSeconds()).padStart(2, '0');
      return `${year}${month}${day}T${hours}${minutes}${seconds}`;
    };

    const dates = `${formatDateTime(startDate)}/${formatDateTime(endDate)}`;
    const text = encodeURIComponent(eventName);
    const details = encodeURIComponent(`이주환의 개인 사이트에서 추가된 이벤트. 카테고리: ${eventCategory}`);
    const url = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${text}&dates=${dates}&details=${details}`;
    return url;
  };

  // Function to call Gemini API to generate event agenda/description
  const generateEventAgenda = async (name, category) => {
    setIsLoadingAI(true);
    setModalTitle(`'${name}' 이벤트 의제`);
    setModalContent('의제 생성 중... 잠시 기다려주세요.');
    setShowModal(true);

    try {
        let chatHistory = [];
        const prompt = `이름이 "${name}"이고 카테고리가 "${category}"인 이벤트에 대한 상세한 의제 또는 설명을 생성해 주세요. 핵심 활동과 시간을 포함하여 명확한 bullet point 목록으로 제공해 주세요. 다른 서론이나 결론은 포함하지 마세요.`;
        chatHistory.push({ role: "user", parts: [{ text: prompt }] });
        const payload = { contents: chatHistory };
        const apiKey = ""; // Canvas 환경에서 자동으로 제공
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        const result = await response.json();
        if (result.candidates && result.candidates.length > 0 &&
            result.candidates[0].content && result.candidates[0].content.parts &&
            result.candidates[0].content.parts.length > 0) {
            const text = result.candidates[0].content.parts[0].text;
            // Split by lines to display as a list, filter out empty lines
            const agendaItems = text.split('\n').filter(line => line.trim() !== '');
            if (agendaItems.length > 0) {
              setModalContent(
                <ul className="list-disc list-inside">
                  {agendaItems.map((item, index) => (
                    <li key={index} className="mb-1">{item}</li>
                  ))}
                </ul>
              );
            } else {
              setModalContent("의제가 생성되지 않았습니다. 모델이 요청을 이해하지 못했거나 이벤트가 너무 간단했을 수 있습니다.");
            }
        } else {
            console.error("Gemini API에서 예상한 콘텐츠를 반환하지 않았습니다.", result);
            setModalContent("의제 생성에 실패했습니다. 다시 시도하거나 콘솔에서 오류를 확인해주세요.");
        }
    } catch (error) {
        console.error("Gemini API 호출 오류:", error);
        setModalContent("AI 서비스 연결 중 오류가 발생했습니다. 네트워크를 확인하거나 나중에 다시 시도해주세요.");
    } finally {
        setIsLoadingAI(false);
    }
  };

  // Filtered events based on search term
  const filteredEvents = events.filter(event =>
    event.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    event.category.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 md:p-8">
      <h2 className="text-3xl font-bold text-gray-800 dark:text-gray-100 mb-6">일정 플래너</h2>

      {/* Search Bar */}
      <div className="mb-6 flex">
        <input
          type="text"
          placeholder="이벤트 검색..."
          className="flex-1 p-3 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-200"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <button className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-r-lg hover:bg-blue-700 transition duration-200 shadow-md">
          검색
        </button>
      </div>

      {/* Event Input Form: Uses a grid layout that stacks on small screens */}
      <form onSubmit={addEvent} className="mb-8 p-6 bg-gray-50 dark:bg-gray-700 rounded-lg shadow-inner">
        <h3 className="text-xl font-semibold text-gray-700 dark:text-gray-100 mb-4">새 이벤트 추가</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div>
            <label htmlFor="eventName" className="block text-gray-700 dark:text-gray-100 text-sm font-semibold mb-2">
              이벤트 이름:
            </label>
            <input
              type="text"
              id="eventName"
              className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-200"
              value={eventName}
              onChange={(e) => setNewEventName(e.target.value)}
              placeholder="예: 팀 회의"
              required
            />
          </div>
          <div>
            <label htmlFor="eventDate" className="block text-gray-700 dark:text-gray-100 text-sm font-semibold mb-2">
              날짜:
            </label>
            <input
              type="date"
              id="eventDate"
              className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-200"
              value={eventDate}
              onChange={(e) => setNewEventDate(e.target.value)}
              required
            />
          </div>
          <div>
            <label htmlFor="eventCategory" className="block text-gray-700 dark:text-gray-100 text-sm font-semibold mb-2">
              카테고리:
            </label>
            <select
              id="eventCategory"
              className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-200"
              value={eventCategory}
              onChange={(e) => setNewEventCategory(e.target.value)}
            >
              <option value="Work">업무</option>
              <option value="Personal">개인</option>
              <option value="Social">사교</option>
              <option value="Other">기타</option>
            </select>
          </div>
        </div>
        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-3 rounded-lg font-bold text-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition duration-300 shadow-md"
        >
          이벤트 추가
        </button>
      </form>

      {/* Event List: Uses a grid layout that stacks on small screens (1 column)
          and becomes 2 or 3 columns on medium and large screens respectively. */}
      <h3 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">내 이벤트</h3>
      {filteredEvents.length === 0 ? (
        <p className="text-gray-600 dark:text-gray-400 italic mb-8">아직 이벤트가 없습니다. 위 양식을 사용하여 추가하세요!</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
          {filteredEvents.sort((a, b) => a.timestamp - b.timestamp).map((event, index) => (
            <div key={index} className="bg-indigo-50 dark:bg-indigo-900 p-4 rounded-lg shadow-sm border border-indigo-200 dark:border-indigo-700 flex flex-col justify-between">
              <div>
                <p className="font-semibold text-lg text-indigo-800 dark:text-indigo-100">{event.name}</p>
                <p className="text-sm text-indigo-600 dark:text-indigo-300">날짜: {event.date}</p>
                <p className="text-sm text-indigo-600 dark:text-indigo-300">카테고리: {event.category}</p>
              </div>
              <div className="flex flex-wrap gap-2 mt-3">
                <button
                  onClick={() => window.open(generateGoogleCalendarUrl(event.name, event.date), '_blank')}
                  className="px-4 py-2 bg-rose-500 text-white text-sm rounded-md hover:bg-rose-600 transition duration-200 shadow-md flex items-center"
                >
                  <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd"></path></svg>
                  Google 캘린더에 추가
                </button>
                <button
                  onClick={() => generateEventAgenda(event.name, event.category)}
                  className="px-4 py-2 bg-pink-500 text-white text-sm rounded-md hover:bg-pink-600 transition duration-200 shadow-md flex items-center"
                  disabled={isLoadingAI}
                >
                  {isLoadingAI ? '생성 중...' : '✨ 의제 생성'}
                </button>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* 차트 및 그래프 섹션: 작은 화면에서는 그리드 레이아웃이 쌓이고 (1열),
          큰 화면에서는 2열이 됩니다 (`lg:grid-cols-2`). */}
      <h3 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">이벤트 통계</h3>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* 월별 이벤트 차트 (간단한 막대 차트) */}
        <div className="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-md">
          <h4 className="text-xl font-bold text-gray-700 dark:text-gray-100 mb-4">월별 이벤트</h4>
          {monthData.length > 0 ? (
            <div className="flex flex-col space-y-3">
              {monthData.map((data, index) => (
                <div key={index} className="flex items-center">
                  <span className="w-24 text-gray-700 dark:text-gray-200 font-medium">{data.month}:</span>
                  <div className="flex-1 bg-gray-200 dark:bg-gray-600 rounded-full h-6 relative overflow-hidden">
                    <div
                      className="bg-blue-500 h-full rounded-full transition-all duration-500 ease-out"
                      style={{ width: `${(data.count / Math.max(...monthData.map(m => m.count))) * 100}%` }}
                    ></div>
                    <span className="absolute inset-0 flex items-center justify-center text-white text-sm font-semibold">
                      {data.count}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-600 dark:text-gray-400 italic">월별 분포를 보려면 이벤트를 추가하세요.</p>
          )}
        </div>

        {/* 카테고리별 이벤트 차트 (텍스트) */}
        <div className="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-md">
          <h4 className="text-xl font-bold text-gray-700 dark:text-gray-100 mb-4">카테고리별 이벤트</h4>
          {Object.keys(eventsByCategory).length > 0 ? (
            <ul className="space-y-2 text-gray-700 dark:text-gray-200">
              {Object.entries(eventsByCategory).map(([category, count]) => (
                <li key={category} className="flex justify-between items-center bg-white dark:bg-gray-600 p-3 rounded-md shadow-sm">
                  <span className="font-medium">{category}:</span>
                  <span className="bg-purple-100 dark:bg-purple-700 text-purple-800 dark:text-purple-100 text-sm font-semibold px-3 py-1 rounded-full">
                    {count}개 이벤트
                  </span>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-gray-600 dark:text-gray-400 italic">카테고리별 분석을 보려면 이벤트를 추가하세요.</p>
          )}
        </div>
      </div>
    </div>
  );
}

// Design Page Content
function DesignContent({ externalProjects, setExternalProjects, showToast, setShowModal, setModalTitle, setModalContent, setIsLoadingAI, isLoadingAI }) {
  const [newProjectName, setNewProjectName] = useState('');
  const [newProjectStatus, setNewProjectStatus] = useState('진행 중'); // 한국어 상태
  const [searchTerm, setSearchTerm] = useState(''); // State for search term in projects
  const [projectIdeaPrompt, setProjectIdeaPrompt] = useState(''); // State for project idea prompt

  const addExternalProject = (e) => {
    e.preventDefault();
    if (newProjectName.trim() === '') {
      console.log('프로젝트 이름은 비워둘 수 없습니다.');
      showToast('프로젝트 이름은 비워둘 수 없습니다.', 'error');
      return;
    }
    const newProject = {
      name: newProjectName,
      status: newProjectStatus,
      timestamp: Date.now(), // Add a timestamp for sorting
    };
    setExternalProjects([...externalProjects, newProject]);
    showToast('새 프로젝트가 추가되었습니다!', 'success');
    setNewProjectName('');
    setNewProjectStatus('진행 중'); // 한국어 상태
  };

  // Filtered projects based on search term
  const filteredProjects = externalProjects.filter(project =>
    project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    project.status.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Function to call Gemini API to brainstorm project ideas
  const brainstormProjectIdeas = async () => {
    if (projectIdeaPrompt.trim() === '') {
      showToast('아이디어 구상을 위한 주제를 입력해주세요.', 'error');
      return;
    }

    setIsLoadingAI(true);
    setModalTitle(`'${projectIdeaPrompt}'에 대한 프로젝트 아이디어`);
    setModalContent('아이디어를 구상 중... 잠시 기다려주세요.');
    setShowModal(true);

    try {
      let chatHistory = [];
      const prompt = `주제 "${projectIdeaPrompt}"에 대해 5가지 창의적인 프로젝트 아이디어를 구상해 주세요. 각 아이디어를 간략하게 설명하고, 목록 형식으로 제공해 주세요. 다른 서론이나 결론은 포함하지 마세요.`;
      chatHistory.push({ role: "user", parts: [{ text: prompt }] });
      const payload = { contents: chatHistory };
      const apiKey = ""; // Canvas 환경에서 자동으로 제공
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

      const response = await fetch(apiUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
      });

      const result = await response.json();
      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
          const text = result.candidates[0].content.parts[0].text;
          const ideas = text.split('\n').filter(line => line.trim() !== '');
          if (ideas.length > 0) {
            setModalContent(
              <ul className="list-disc list-inside">
                {ideas.map((idea, index) => (
                  <li key={index} className="mb-1">{idea}</li>
                ))}
              </ul>
            );
          } else {
            setModalContent("아이디어가 생성되지 않았습니다. 모델이 요청을 이해하지 못했거나 주제가 너무 모호했을 수 있습니다.");
          }
      } else {
          console.error("Gemini API에서 예상한 콘텐츠를 반환하지 않았습니다.", result);
          setModalContent("아이디어 생성에 실패했습니다. 다시 시도하거나 콘솔에서 오류를 확인해주세요.");
      }
    } catch (error) {
        console.error("Gemini API 호출 오류:", error);
        setModalContent("AI 서비스 연결 중 오류가 발생했습니다. 네트워크를 확인하거나 나중에 다시 시도해주세요.");
    } finally {
        setIsLoadingAI(false);
        setProjectIdeaPrompt(''); // Clear prompt
    }
  };


  return (
    <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 md:p-8">
      <h2 className="text-3xl font-bold text-gray-800 dark:text-gray-100 mb-6">디자인 허브</h2>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* 내부 요청 섹션 */}
        <div className="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-md">
          <h3 className="text-2xl font-semibold text-gray-700 dark:text-gray-100 mb-4">내부 요청 및 작업</h3>
          <p className="text-gray-700 dark:text-gray-200 leading-relaxed mb-4">
            이 섹션은 다양한 팀 또는 개인 작업의 내부 디자인 요청을 관리하는 데 전념합니다.
            여기에서 진행 중인 작업을 나열하고, 완료된 디자인을 검토하며, 진행 상황을 추적할 수 있습니다.
          </p>
          <ul className="list-disc list-inside text-gray-600 dark:text-gray-300 space-y-2">
            <li>프로젝트 X의 UI 목업 검토</li>
            <li>브랜드 가이드라인 문서 생성</li>
            <li>웹사이트 아이콘 세트 업데이트</li>
            <li>팀 협업 자산</li>
          </ul>
          <button className="mt-6 px-6 py-2 bg-purple-600 text-white font-semibold rounded-md hover:bg-purple-700 transition duration-200 shadow-md">
            내부 보드 보기
          </button>
        </div>

        {/* 외부 프로젝트 섹션 */}
        <div className="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-md">
          <h3 className="text-2xl font-semibold text-gray-700 dark:text-gray-100 mb-4">외부 프로젝트</h3>

          {/* 프로젝트 아이디어 구상 AI 기능 */}
          <div className="mb-6 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg shadow-inner">
            <h4 className="text-xl font-semibold text-gray-700 dark:text-gray-100 mb-3">✨ 프로젝트 아이디어 구상</h4>
            <div className="flex mb-3">
              <input
                type="text"
                className="flex-1 p-3 border border-gray-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-100 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-pink-400 transition duration-200"
                placeholder="아이디어를 위한 주제 입력 (예: 모바일 게임)"
                value={projectIdeaPrompt}
                onChange={(e) => setProjectIdeaPrompt(e.target.value)}
                onKeyPress={(e) => {
                  if (e.key === 'Enter') brainstormProjectIdeas();
                }}
              />
              <button
                onClick={brainstormProjectIdeas}
                className="px-6 py-3 bg-pink-500 text-white font-semibold rounded-r-lg hover:bg-pink-600 focus:outline-none focus:ring-2 focus:ring-pink-400 focus:ring-opacity-75 transition duration-200 shadow-md"
                disabled={isLoadingAI}
              >
                {isLoadingAI ? '생성 중...' : '아이디어 구상'}
              </button>
            </div>
            <p className="text-sm text-gray-500 dark:text-gray-400">주제에 대한 창의적인 프로젝트 아이디어를 얻으세요.</p>
          </div>

          {/* 새 프로젝트 추가 폼 */}
          <form onSubmit={addExternalProject} className="mb-6 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg shadow-inner">
            <h4 className="text-xl font-semibold text-gray-700 dark:text-gray-100 mb-3">새 프로젝트 추가</h4>
            <div className="mb-3">
              <label htmlFor="newProjectName" className="block text-gray-700 dark:text-gray-100 text-sm font-semibold mb-2">
                프로젝트 이름:
              </label>
              <input
                type="text"
                id="newProjectName"
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400"
                value={newProjectName}
                onChange={(e) => setNewProjectName(e.target.value)}
                placeholder="예: 클라이언트 웹사이트 출시"
                required
              />
            </div>
            <div className="mb-4">
              <label htmlFor="newProjectStatus" className="block text-gray-700 dark:text-gray-100 text-sm font-semibold mb-2">
                상태:
              </label>
              <select
                id="newProjectStatus"
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400"
                value={newProjectStatus}
                onChange={(e) => setNewProjectStatus(e.target.value)}
              >
                <option value="진행 중">진행 중</option>
                <option value="완료">완료</option>
                <option value="대기 중">대기 중</option>
                <option value="보류 중">보류 중</option>
              </select>
            </div>
            <button
              type="submit"
              className="w-full bg-green-600 text-white py-2 rounded-lg font-bold hover:bg-green-700 transition duration-200 shadow-md"
            >
              프로젝트 추가
            </button>
          </form>

          {/* 검색 바 */}
          <div className="mb-6 flex">
            <input
              type="text"
              placeholder="프로젝트 검색..."
              className="flex-1 p-3 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-green-400 transition duration-200"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <button className="px-6 py-3 bg-green-600 text-white font-semibold rounded-r-lg hover:bg-green-700 transition duration-200 shadow-md">
              검색
            </button>
          </div>

          {externalProjects.length > 0 ? (
            <ul className="space-y-3">
              {filteredProjects.sort((a,b) => b.timestamp - a.timestamp).map((project, index) => (
                <li key={index} className="bg-white dark:bg-gray-600 p-3 rounded-md shadow-sm border border-gray-200 dark:border-gray-500">
                  <p className="font-semibold text-gray-800 dark:text-gray-100">{project.name}</p>
                  <p className="text-sm text-gray-600 dark:text-gray-300">상태: {project.status}</p>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-gray-600 dark:text-gray-400 italic">아직 추가된 외부 프로젝트가 없습니다.</p>
          )}

          {/* 파일 업로드 섹션 (자리표시자) */}
          <div className="mt-8 p-6 bg-blue-50 dark:bg-blue-900 rounded-lg shadow-inner">
            <h3 className="text-2xl font-semibold text-blue-800 dark:text-blue-100 mb-4">파일 업로드 및 다운로드</h3>
            <p className="text-blue-700 dark:text-blue-200 leading-relaxed mb-4">
              여기에 디자인 파일 (예: PDF, 이미지)을 업로드하고 이전 자산을 다운로드할 수 있습니다.
              <br/>
              <strong className="text-red-600 dark:text-red-400">참고:</strong> 이 기능은 현재 클라이언트 측 전용이며, 실제 파일 저장 및 영구 다운로드를 위해서는 백엔드 스토리지가 필요합니다.
            </p>
            <input
              type="file"
              className="w-full px-3 py-2 border border-blue-300 dark:border-blue-600 rounded-lg bg-white dark:bg-gray-800 text-blue-700 dark:text-blue-100 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200 cursor-pointer"
            />
            <p className="text-sm text-blue-600 dark:text-blue-300 mt-2">업로드 기능은 현재 시뮬레이션됩니다.</p>
            <button className="mt-4 px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition duration-200 shadow-md">
              다운로드 (자리표시자)
            </button>
          </div>

          {/* 문의 또는 피드백 양식 */}
          <div className="mt-8 p-6 bg-yellow-50 dark:bg-yellow-900 rounded-lg shadow-inner">
            <h3 className="text-2xl font-semibold text-yellow-800 dark:text-yellow-100 mb-4">문의 또는 피드백 양식</h3>
            <p className="text-yellow-700 dark:text-yellow-200 leading-relaxed mb-4">
              질문이 있거나 피드백을 제공하려면 아래 양식을 사용하세요.
            </p>
            <form className="space-y-4">
              <div>
                <label htmlFor="contactName" className="block text-yellow-700 dark:text-yellow-100 text-sm font-semibold mb-2">
                  이름:
                </label>
                <input
                  type="text"
                  id="contactName"
                  className="w-full px-3 py-2 border border-yellow-300 dark:border-yellow-600 dark:bg-gray-800 dark:text-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-400"
                  placeholder="당신의 이름"
                />
              </div>
              <div>
                <label htmlFor="contactEmail" className="block text-yellow-700 dark:text-yellow-100 text-sm font-semibold mb-2">
                  이메일:
                </label>
                <input
                  type="email"
                  id="contactEmail"
                  className="w-full px-3 py-2 border border-yellow-300 dark:border-yellow-600 dark:bg-gray-800 dark:text-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-400"
                  placeholder="your_email@example.com"
                />
              </div>
              <div>
                <label htmlFor="contactMessage" className="block text-yellow-700 dark:text-yellow-100 text-sm font-semibold mb-2">
                  메시지:
                </label>
                <textarea
                  id="contactMessage"
                  rows="4"
                  className="w-full px-3 py-2 border border-yellow-300 dark:border-yellow-600 dark:bg-gray-800 dark:text-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-400"
                  placeholder="메시지를 여기에 입력하세요..."
                ></textarea>
              </div>
              <button
                type="submit"
                className="w-full bg-yellow-600 text-white py-2 rounded-lg font-bold hover:bg-yellow-700 transition duration-200 shadow-md"
              >
                메시지 보내기 (백엔드 필요)
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
